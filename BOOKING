<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>TIAIC Venue Booking Schedule</title>
    <style>
        body {
            font-family: Arial, sans-serif;
            line-height: 1.6;
            margin: 0;
            padding: 20px;
            color: #333;
            background-color: #f5f5f5;
        }
        
        .container {
            max-width: 1200px;
            margin: 0 auto;
            background-color: white;
            padding: 20px;
            border-radius: 8px;
            box-shadow: 0 2px 10px rgba(0,0,0,0.1);
        }
        
        h1 {
            text-align: center;
            color: #2c3e50;
            margin-bottom: 30px;
        }
        
        .booking-form, .bookings-list, .admin-login {
            margin-bottom: 40px;
        }
        
        .form-group {
            margin-bottom: 15px;
        }
        
        label {
            display: block;
            margin-bottom: 5px;
            font-weight: bold;
        }
        
        input, select, textarea {
            width: 100%;
            padding: 8px;
            border: 1px solid #ddd;
            border-radius: 4px;
            box-sizing: border-box;
        }
        
        textarea {
            height: 100px;
            resize: vertical;
        }
        
        button {
            background-color: #3498db;
            color: white;
            border: none;
            padding: 10px 20px;
            border-radius: 4px;
            cursor: pointer;
            font-size: 16px;
            margin-right: 5px;
        }
        
        button:hover {
            background-color: #2980b9;
        }
        
        table {
            width: 100%;
            border-collapse: collapse;
            margin-top: 20px;
        }
        
        table, th, td {
            border: 1px solid #ddd;
        }
        
        th, td {
            padding: 12px;
            text-align: left;
        }
        
        th {
            background-color: #f2f2f2;
        }
        
        tr:nth-child(even) {
            background-color: #f9f9f9;
        }
        
        .filters {
            display: flex;
            gap: 15px;
            margin-bottom: 20px;
        }
        
        .filter-group {
            flex: 1;
        }
        
        .capacity-info {
            color: #666;
            font-size: 14px;
            font-style: italic;
        }
        
        .hidden {
            display: none;
        }
        
        .tab-buttons {
            display: flex;
            justify-content: center;
            margin-bottom: 20px;
        }
        
        .tab-button {
            padding: 10px 20px;
            margin: 0 5px;
            background-color: #f2f2f2;
            border: none;
            cursor: pointer;
            border-radius: 4px;
        }
        
        .tab-button.active {
            background-color: #3498db;
            color: white;
        }
        
        .confirmation-message {
            padding: 20px;
            background-color: #d4edda;
            color: #155724;
            border-radius: 4px;
            margin-bottom: 20px;
            text-align: center;
        }
        
        .error-message {
            padding: 20px;
            background-color: #f8d7da;
            color: #721c24;
            border-radius: 4px;
            margin-bottom: 20px;
            text-align: center;
        }
        
        .logo {
            text-align: center;
            margin-bottom: 20px;
        }
        
        .logo img {
            max-width: 200px;
        }
        
        .time-input-group {
            display: flex;
            gap: 15px;
            align-items: center;
        }
        
        .time-input {
            flex: 1;
        }
        
        .action-buttons {
            display: flex;
            gap: 5px;
        }
        
        .confirmed-booking {
            background-color: #e8f7ed;
        }
        
        .status-label {
            display: inline-block;
            padding: 3px 8px;
            border-radius: 3px;
            font-size: 12px;
            font-weight: bold;
        }
        
        .status-pending {
            background-color: #ffeeba;
            color: #856404;
        }
        
        .status-confirmed {
            background-color: #c3e6cb;
            color: #155724;
        }
        
        .loading {
            text-align: center;
            margin: 20px 0;
            font-style: italic;
            color: #666;
        }
        
        @media (max-width: 768px) {
            .filters {
                flex-direction: column;
            }
            
            .time-input-group {
                flex-direction: column;
                gap: 10px;
            }
            
            .time-input {
                width: 100%;
            }
            
            .action-buttons {
                flex-direction: column;
            }
        }
    </style>
</head>
<body>
    <div class="container">
        <div class="logo">
            <!-- Placeholder for logo -->
            <h2>TIAIC</h2>
        </div>
        
        <h1>TIAIC Venue Booking Schedule</h1>
        
        <div class="tab-buttons">
            <button id="bookingTabBtn" class="tab-button active">Book a Venue</button>
            <button id="adminTabBtn" class="tab-button">Admin Access</button>
        </div>
        
        <div id="errorMessage" class="error-message hidden">
            Error connecting to booking service. Please try again later.
        </div>
        
        <div id="bookingTab" class="booking-form">
            <h2>Book a Venue</h2>
            <form id="bookingForm">
                <div class="form-group">
                    <label for="eventDate">Date of Event:</label>
                    <input type="date" id="eventDate" required>
                </div>
                
                <div class="form-group">
                    <label>Time Period:</label>
                    <div class="time-input-group">
                        <div class="time-input">
                            <label for="startTime">Start Time:</label>
                            <input type="time" id="startTime" required min="08:00" max="21:00">
                        </div>
                        <div class="time-input">
                            <label for="endTime">End Time:</label>
                            <input type="time" id="endTime" required min="09:00" max="22:00">
                        </div>
                    </div>
                    <small>Operating hours: 08:00 - 22:00</small>
                </div>
                
                <div class="form-group">
                    <label for="venue">Venue:</label>
                    <select id="venue" required>
                        <option value="">-- Select a Venue --</option>
                        <option value="Training Room">Training Room (24 Pax)</option>
                        <option value="Roadshow Room">Roadshow Room (50 Pax)</option>
                        <option value="Meeting Room A">Meeting Room A (10 Pax)</option>
                        <option value="Meeting Room B">Meeting Room B (6 Pax)</option>
                        <option value="Meeting Room VIP">Meeting Room VIP (8 Pax)</option>
                        <option value="Pantry Area">Pantry Area (10 Pax)</option>
                        <option value="Open Coach Space">Open Coach Space (20 Pax)</option>
                        <option value="Tea Room">Tea Room (4-20 Pax)</option>
                    </select>
                </div>
                
                <div class="form-group">
                    <label for="groupSize">Group Size:</label>
                    <input type="number" id="groupSize" min="1" required>
                </div>
                
                <div class="form-group">
                    <label for="bookedBy">Booked By:</label>
                    <input type="text" id="bookedBy" required>
                </div>
                
                <div class="form-group">
                    <label for="email">Email Address:</label>
                    <input type="email" id="email" required>
                </div>
                
                <div class="form-group">
                    <label for="notes">Notes:</label>
                    <textarea id="notes"></textarea>
                </div>
                
                <button type="submit" id="submitBookingBtn">Book Venue</button>
            </form>
            
            <div id="confirmationMessage" class="confirmation-message hidden">
                Thank you for your booking request! We will confirm your booking after your payment. For enquiries, please email tiaic@tembusutech.com.sg 
            </div>
        </div>
        
        <div id="adminTab" class="hidden">
            <div id="adminLogin" class="admin-login">
                <h2>Admin Login</h2>
                <p>Access to booking information is restricted to Tembusu Institute staff only.</p>
                
                <div class="form-group">
                    <label for="adminPassword">Password:</label>
                    <input type="password" id="adminPassword" placeholder="Enter company password">
                </div>
                
                <button id="loginBtn">Login</button>
            </div>
            
            <div id="bookingsList" class="bookings-list hidden">
                <h2>Current Bookings</h2>
                <button id="logoutBtn" style="float: right; background-color: #e74c3c;">Logout</button>
                
                <div class="filters">
                    <div class="filter-group">
                        <label for="filterDate">Filter by Date:</label>
                        <input type="date" id="filterDate">
                    </div>
                    
                    <div class="filter-group">
                        <label for="filterVenue">Filter by Venue:</label>
                        <select id="filterVenue">
                            <option value="">All Venues</option>
                            <option value="Training Room">Training Room</option>
                            <option value="Roadshow Room">Roadshow Room</option>
                            <option value="Meeting Room A">Meeting Room A</option>
                            <option value="Meeting Room B">Meeting Room B</option>
                            <option value="Meeting Room VIP">Meeting Room VIP</option>
                            <option value="Pantry Area">Pantry Area</option>
                            <option value="Open Coach Space">Open Coach Space</option>
                            <option value="Tea Room">Tea Room</option>
                        </select>
                    </div>
                    
                    <div class="filter-group">
                        <label for="filterStatus">Filter by Status:</label>
                        <select id="filterStatus">
                            <option value="">All Statuses</option>
                            <option value="pending">Pending</option>
                            <option value="confirmed">Confirmed</option>
                        </select>
                    </div>
                </div>
                
                <div id="loadingMessage" class="loading">Loading bookings...</div>
                
                <table id="bookingsTable">
                    <thead>
                        <tr>
                            <th>Date</th>
                            <th>Time</th>
                            <th>Venue</th>
                            <th>Group Size</th>
                            <th>Booked By</th>
                            <th>Email</th>
                            <th>Status</th>
                            <th>Notes</th>
                            <th>Admin Notes</th>
                            <th>Actions</th>
                        </tr>
                    </thead>
                    <tbody>
                        <!-- Bookings will appear here -->
                    </tbody>
                </table>
            </div>
        </div>
    </div>

    <script>
        document.addEventListener('DOMContentLoaded', function() {
            // API endpoint for centralized booking system
            const API_URL = 'https://api.tiaic.tembusutech.com.sg/bookings';
            
            // For demonstration - we'll simulate the API functionality
            // In a real implementation, you would replace this with actual API calls
            let SERVER_BOOKINGS = JSON.parse(localStorage.getItem('server_bookings')) || [];
            
            // DOM elements
            const bookingForm = document.getElementById('bookingForm');
            const bookingsTable = document.getElementById('bookingsTable').getElementsByTagName('tbody')[0];
            const filterDate = document.getElementById('filterDate');
            const filterVenue = document.getElementById('filterVenue');
            const filterStatus = document.getElementById('filterStatus');
            const confirmationMessage = document.getElementById('confirmationMessage');
            const errorMessage = document.getElementById('errorMessage');
            const loadingMessage = document.getElementById('loadingMessage');
            const startTime = document.getElementById('startTime');
            const endTime = document.getElementById('endTime');
            const submitBookingBtn = document.getElementById('submitBookingBtn');
            
            // Tabs
            const bookingTab = document.getElementById('bookingTab');
            const adminTab = document.getElementById('adminTab');
            const bookingTabBtn = document.getElementById('bookingTabBtn');
            const adminTabBtn = document.getElementById('adminTabBtn');
            
            // Admin sections
            const adminLogin = document.getElementById('adminLogin');
            const bookingsList = document.getElementById('bookingsList');
            const loginBtn = document.getElementById('loginBtn');
            const logoutBtn = document.getElementById('logoutBtn');
            const adminPassword = document.getElementById('adminPassword');
            
            // Company password - in a real app, this would be server-side
            const companyPassword = "TIAIC2025";
            
            // Format date for display
            function formatDate(dateString) {
                const options = { weekday: 'long', year: 'numeric', month: 'long', day: 'numeric' };
                return new Date(dateString).toLocaleDateString(undefined, options);
            }
            
            // Generate a unique ID for bookings
            function generateId() {
                return 'booking_' + Date.now() + '_' + Math.random().toString(36).substr(2, 9);
            }
            
            // API functions (simulated for now)
            async function fetchBookings() {
                try {
                    // Simulate a network request with a slight delay
                    await new Promise(resolve => setTimeout(resolve, 500));
                    
                    // In a real implementation, this would be:
                    // const response = await fetch(API_URL);
                    // const data = await response.json();
                    // return data;
                    
                    // For demonstration, we'll use localStorage to simulate server storage
                    return SERVER_BOOKINGS;
                } catch (error) {
                    console.error('Error fetching bookings:', error);
                    errorMessage.textContent = 'Error fetching bookings. Please try again later.';
                    errorMessage.classList.remove('hidden');
                    return [];
                }
            }
            
            async function createBooking(bookingData) {
                try {
                    // Simulate a network request
                    await new Promise(resolve => setTimeout(resolve, 700));
                    
                    // Add a unique ID to the booking
                    bookingData.id = generateId();
                    
                    // In a real implementation, this would be:
                    // const response = await fetch(API_URL, {
                    //     method: 'POST',
                    //     headers: { 'Content-Type': 'application/json' },
                    //     body: JSON.stringify(bookingData)
                    // });
                    // return await response.json();
                    
                    // For demonstration
                    SERVER_BOOKINGS.push(bookingData);
                    localStorage.setItem('server_bookings', JSON.stringify(SERVER_BOOKINGS));
                    return bookingData;
                } catch (error) {
                    console.error('Error creating booking:', error);
                    errorMessage.textContent = 'Error saving your booking. Please try again later.';
                    errorMessage.classList.remove('hidden');
                    throw error;
                }
            }
            
            async function updateBooking(id, updatedData) {
                try {
                    // Simulate a network request
                    await new Promise(resolve => setTimeout(resolve, 500));
                    
                    // In a real implementation, this would be:
                    // const response = await fetch(`${API_URL}/${id}`, {
                    //     method: 'PUT',
                    //     headers: { 'Content-Type': 'application/json' },
                    //     body: JSON.stringify(updatedData)
                    // });
                    // return await response.json();
                    
                    // For demonstration
                    const index = SERVER_BOOKINGS.findIndex(b => b.id === id);
                    if (index !== -1) {
                        SERVER_BOOKINGS[index] = { ...SERVER_BOOKINGS[index], ...updatedData };
                        localStorage.setItem('server_bookings', JSON.stringify(SERVER_BOOKINGS));
                        return SERVER_BOOKINGS[index];
                    }
                    throw new Error('Booking not found');
                } catch (error) {
                    console.error('Error updating booking:', error);
                    errorMessage.textContent = 'Error updating booking. Please try again later.';
                    errorMessage.classList.remove('hidden');
                    throw error;
                }
            }
            
            async function deleteBooking(id) {
                try {
                    // Simulate a network request
                    await new Promise(resolve => setTimeout(resolve, 500));
                    
                    // In a real implementation, this would be:
                    // const response = await fetch(`${API_URL}/${id}`, {
                    //     method: 'DELETE'
                    // });
                    // return response.ok;
                    
                    // For demonstration
                    const index = SERVER_BOOKINGS.findIndex(b => b.id === id);
                    if (index !== -1) {
                        SERVER_BOOKINGS.splice(index, 1);
                        localStorage.setItem('server_bookings', JSON.stringify(SERVER_BOOKINGS));
                        return true;
                    }
                    throw new Error('Booking not found');
                } catch (error) {
                    console.error('Error deleting booking:', error);
                    errorMessage.textContent = 'Error cancelling booking. Please try again later.';
                    errorMessage.classList.remove('hidden');
                    throw error;
                }
            }
            
            // Display bookings in the table
            async function displayBookings() {
                try {
                    loadingMessage.classList.remove('hidden');
                    bookingsTable.innerHTML = '';
                    
                    // Get bookings from API
                    const bookings = await fetchBookings();
                    
                    // Get filter values
                    const dateFilter = filterDate.value;
                    const venueFilter = filterVenue.value;
                    const statusFilter = filterStatus.value;
                    
                    // Filter bookings
                    let filteredBookings = bookings;
                    
                    if (dateFilter) {
                        filteredBookings = filteredBookings.filter(booking => booking.eventDate === dateFilter);
                    }
                    
                    if (venueFilter) {
                        filteredBookings = filteredBookings.filter(booking => booking.venue === venueFilter);
                    }
                    
                    if (statusFilter) {
                        filteredBookings = filteredBookings.filter(booking => booking.status === statusFilter);
                    }
                    
                    // Sort bookings by date (most recent first)
                    filteredBookings.sort((a, b) => new Date(a.eventDate) - new Date(b.eventDate));
                    
                    loadingMessage.classList.add('hidden');
                    
                    // Add bookings to table
                    if (filteredBookings.length === 0) {
                        const row = bookingsTable.insertRow();
                        const cell = row.insertCell(0);
                        cell.colSpan = 10;
                        cell.textContent = 'No bookings found';
                        cell.style.textAlign = 'center';
                        return;
                    }
                    
                    filteredBookings.forEach((booking) => {
                        const row = bookingsTable.insertRow();
                        
                        // Add class for confirmed bookings
                        if (booking.status === 'confirmed') {
                            row.classList.add('confirmed-booking');
                        }
                        
                        row.insertCell(0).textContent = formatDate(booking.eventDate);
                        row.insertCell(1).textContent = `${booking.startTime} - ${booking.endTime}`;
                        row.insertCell(2).textContent = booking.venue;
                        row.insertCell(3).textContent = booking.groupSize;
                        row.insertCell(4).textContent = booking.bookedBy;
                        row.insertCell(5).textContent = booking.email;
                        
                        // Status cell
                        const statusCell = row.insertCell(6);
                        const statusLabel = document.createElement('span');
                        statusLabel.textContent = booking.status === 'confirmed' ? 'Confirmed' : 'Pending';
                        statusLabel.classList.add('status-label');
                        statusLabel.classList.add(booking.status === 'confirmed' ? 'status-confirmed' : 'status-pending');
                        statusCell.appendChild(statusLabel);
                        
                        // Notes cell
                        row.insertCell(7).textContent = booking.notes || '';
                        
                        // Admin notes cell
                        const adminNotesCell = row.insertCell(8);
                        const adminNotesInput = document.createElement('textarea');
                        adminNotesInput.value = booking.adminNotes || '';
                        adminNotesInput.rows = 2;
                        adminNotesInput.style.width = '100%';
                        adminNotesInput.addEventListener('change', async function() {
                            try {
                                await updateBooking(booking.id, { 
                                    adminNotes: adminNotesInput.value 
                                });
                            } catch (error) {
                                console.error('Failed to update admin notes:', error);
                            }
                        });
                        adminNotesCell.appendChild(adminNotesInput);
                        
                        // Actions cell
                        const actionsCell = row.insertCell(9);
                        const actionsDiv = document.createElement('div');
                        actionsDiv.className = 'action-buttons';
                        
                        // Cancel button
                        const deleteButton = document.createElement('button');
                        deleteButton.textContent = 'Cancel';
                        deleteButton.style.backgroundColor = '#e74c3c';
                        deleteButton.onclick = async function() {
                            if (confirm('Are you sure you want to cancel this booking?')) {
                                try {
                                    await deleteBooking(booking.id);
                                    displayBookings();
                                } catch (error) {
                                    console.error('Failed to cancel booking:', error);
                                }
                            }
                        };
                        actionsDiv.appendChild(deleteButton);
                        
                        // Confirm button - only show if not already confirmed
                        if (booking.status !== 'confirmed') {
                            const confirmButton = document.createElement('button');
                            confirmButton.textContent = 'Confirm';
                            confirmButton.style.backgroundColor = '#27ae60';
                            confirmButton.onclick = async function() {
                                if (confirm('Confirm this booking? This will block this time slot from future bookings.')) {
                                    try {
                                        await updateBooking(booking.id, { status: 'confirmed' });
                                        displayBookings();
                                    } catch (error) {
                                        console.error('Failed to confirm booking:', error);
                                    }
                                }
                            };
                            actionsDiv.appendChild(confirmButton);
                        }
                        
                        actionsCell.appendChild(actionsDiv);
                    });
                } catch (error) {
                    console.error('Error displaying bookings:', error);
                    loadingMessage.classList.add('hidden');
                    errorMessage.classList.remove('hidden');
                }
            }
            
            // Check if two time ranges overlap
            function isTimeOverlap(startA, endA, startB, endB) {
                return (startA < endB && endA > startB);
            }
            
            // Check if booking time is valid
            function isValidBookingTime(start, end) {
                // Ensure end time is after start time
                return start < end;
            }
            
            // Check if there's a confirmed booking that conflicts with the requested time
            async function hasBookingConflict(date, venue, startTime, endTime) {
                try {
                    const bookings = await fetchBookings();
                    
                    return bookings.some(booking => 
                        booking.eventDate === date && 
                        booking.venue === venue && 
                        isTimeOverlap(startTime, endTime, booking.startTime, booking.endTime)
                    );
                } catch (error) {
                    console.error('Error checking for booking conflicts:', error);
                    return false;
                }
            }
            
            // Handle form submission
            bookingForm.addEventListener('submit', async function(e) {
                e.preventDefault();
                
                // Disable submit button to prevent double submission
                submitBookingBtn.disabled = true;
                submitBookingBtn.textContent = 'Processing...';
                
                try {
                    const eventDate = document.getElementById('eventDate').value;
                    const startTimeValue = document.getElementById('startTime').value;
                    const endTimeValue = document.getElementById('endTime').value;
                    const venue = document.getElementById('venue').value;
                    const groupSize = document.getElementById('groupSize').value;
                    const bookedBy = document.getElementById('bookedBy').value;
                    const email = document.getElementById('email').value;
                    const notes = document.getElementById('notes').value;
                    
                    // Hide any previous error messages
                    errorMessage.classList.add('hidden');
                    
                    // Validate time inputs
                    if (!startTimeValue || !endTimeValue) {
                        alert('Please select both start and end times');
                        return;
                    }
                    
                    // Check if end time is after start time
                    if (!isValidBookingTime(startTimeValue, endTimeValue)) {
                        alert('End time must be after start time');
                        return;
                    }
                    
                    // Basic validation for group size
                    const maxCapacity = {
                        'Training Room': 24,
                        'Roadshow Room': 50,
                        'Meeting Room A': 10,
                        'Meeting Room B': 6,
                        'Meeting Room VIP': 8,
                        'Pantry Area': 10,
                        'Open Coach Space': 20,
                        'Tea Room': 20
                    };
                    
                    if (parseInt(groupSize) > maxCapacity[venue]) {
                        alert(`This venue has a maximum capacity of ${maxCapacity[venue]} people. Please select a different venue or reduce your group size.`);
                        return;
                    }
                    
                    // Validate email format
                    const emailRegex = /^[^\s@]+@[^\s@]+\.[^\s@]+$/;
                    if (!emailRegex.test(email)) {
                        alert('Please enter a valid email address');
                        return;
                    }
                    
                    // Check for booking conflicts
                    const hasConflict = await hasBookingConflict(eventDate, venue, startTimeValue, endTimeValue);
                    
                    if (hasConflict) {
                        alert('This venue already has a booking that overlaps with your selected time period. Please choose a different time or venue.');
                        return;
                    }
                    
                    // Create new booking with pending status
                    const newBooking = {
                        eventDate,
                        startTime: startTimeValue,
                        endTime: endTimeValue,
                        venue,
                        groupSize,
                        bookedBy,
                        email,
                        notes,
                        adminNotes: '',
                        status: 'pending',
                        createdAt: new Date().toISOString()
                    };
                    
                    // Save to the centralized system
                    await createBooking(newBooking);
                    
                    // Reset form and show confirmation
                    bookingForm.reset();
                    bookingForm.style.display = 'none';
                    confirmationMessage.classList.remove('hidden');
                    
                    // Reset form after 5 seconds
                    setTimeout(() => {
                        bookingForm.style.display = 'block';
                        confirmationMessage.classList.add('hidden');
                    }, 5000);
                } catch (error) {
                    console.error('Error submitting booking:', error);
                    errorMessage.classList.remove('hidden');
                } finally {
                    // Re-enable the submit button
                    submitBookingBtn.disabled = false;
                    submitBookingBtn.textContent = 'Book Venue';
                }
            });
            
            // Set up filter change handlers
            filterDate.addEventListener('change', displayBookings);
            filterVenue.addEventListener('change', displayBookings);
            filterStatus.addEventListener('change', displayBookings);
            
            // Tab switching
            bookingTabBtn.addEventListener('click', function() {
                bookingTab.classList.remove('hidden');
                adminTab.classList.add('hidden');
                bookingTabBtn.classList.add('active');
                adminTabBtn.classList.remove('active');
                errorMessage.classList.add('hidden');
            });
            
            adminTabBtn.addEventListener('click', function() {
                bookingTab.classList.add('hidden');
                adminTab.classList.remove('hidden');
                bookingTabBtn.classList.remove('active');
                adminTabBtn.classList.add('active');
                errorMessage.classList.add('hidden');
            });
            
            // Admin login
            loginBtn.addEventListener('click', function() {
                if (adminPassword.value === companyPassword) {
                    adminLogin.classList.add('hidden');
                    bookingsList.classList.remove('hidden');
                    displayBookings();
                    // Save login state (in a real app, use a proper auth token)
                    sessionStorage.setItem('isAdminLoggedIn', 'true');
                } else {
                    alert('Incorrect password. Access denied.');
                }
            });
            
            // Logout
            logoutBtn.addEventListener('click', function() {
                adminLogin.classList.remove('hidden');
                bookingsList.classList.add('hidden');
                adminPassword.value = '';
                // Clear login state
                sessionStorage.removeItem('isAdminLoggedIn');
            });
            
            // Set minimum date to today
            const today = new Date().toISOString().split('T')[0];
            document.getElementById('eventDate').
document.addEventListener('DOMContentLoaded', function() {
    // API endpoint for centralized booking system
    const API_URL = 'https://api.tiaic.tembusutech.com.sg/bookings';
    
    // For demonstration - we'll simulate the API functionality
    // In a real implementation, you would replace this with actual API calls
    let SERVER_BOOKINGS = JSON.parse(localStorage.getItem('server_bookings')) || [];
    
    // DOM elements
    const bookingForm = document.getElementById('bookingForm');
    const bookingsTable = document.getElementById('bookingsTable').getElementsByTagName('tbody')[0];
    const filterDate = document.getElementById('filterDate');
    const filterVenue = document.getElementById('filterVenue');
    const filterStatus = document.getElementById('filterStatus');
    const confirmationMessage = document.getElementById('confirmationMessage');
    const errorMessage = document.getElementById('errorMessage');
    const loadingMessage = document.getElementById('loadingMessage');
    const startTime = document.getElementById('startTime');
    const endTime = document.getElementById('endTime');
    const submitBookingBtn = document.getElementById('submitBookingBtn');
    
    // Tabs
    const bookingTab = document.getElementById('bookingTab');
    const adminTab = document.getElementById('adminTab');
    const bookingTabBtn = document.getElementById('bookingTabBtn');
    const adminTabBtn = document.getElementById('adminTabBtn');
    
    // Admin sections
    const adminLogin = document.getElementById('adminLogin');
    const bookingsList = document.getElementById('bookingsList');
    const loginBtn = document.getElementById('loginBtn');
    const logoutBtn = document.getElementById('logoutBtn');
    const adminPassword = document.getElementById('adminPassword');
    
    // Company password - in a real app, this would be server-side
    const companyPassword = "TIAIC2025";
    
    // Format date for display
    function formatDate(dateString) {
        const options = { weekday: 'long', year: 'numeric', month: 'long', day: 'numeric' };
        return new Date(dateString).toLocaleDateString(undefined, options);
    }
    
    // Generate a unique ID for bookings
    function generateId() {
        return 'booking_' + Date.now() + '_' + Math.random().toString(36).substr(2, 9);
    }
    
    // Firebase configuration - replace with your own Firebase project details
    const firebaseConfig = {
        apiKey: "YOUR_API_KEY",
        authDomain: "your-project-id.firebaseapp.com",
        projectId: "your-project-id",
        storageBucket: "your-project-id.appspot.com",
        messagingSenderId: "YOUR_MESSAGING_SENDER_ID",
        appId: "YOUR_APP_ID",
        databaseURL: "https://your-project-id-default-rtdb.firebaseio.com"
    };
    
    // Initialize Firebase
    let database;
    try {
        firebase.initializeApp(firebaseConfig);
        database = firebase.database();
        console.log("Firebase initialized successfully");
    } catch (error) {
        console.error("Error initializing Firebase:", error);
        errorMessage.textContent = 'Error connecting to booking service. Please try again later.';
        errorMessage.classList.remove('hidden');
    }
    
    // API functions using Firebase Realtime Database
    async function fetchBookings() {
        try {
            if (!database) {
                // Fallback to localStorage if Firebase fails to initialize
                return SERVER_BOOKINGS;
            }
            
            // Get bookings from Firebase
            const snapshot = await database.ref('bookings').once('value');
            const bookingsData = snapshot.val() || {};
            
            // Convert object to array
            return Object.keys(bookingsData).map(key => ({
                id: key,
                ...bookingsData[key]
            }));
        } catch (error) {
            console.error('Error fetching bookings:', error);
            errorMessage.textContent = 'Error fetching bookings. Please try again later.';
            errorMessage.classList.remove('hidden');
            
            // Fallback to localStorage if Firebase fails
            return SERVER_BOOKINGS;
        }
    }
    
    async function createBooking(bookingData) {
        try {
            // Add a unique ID to the booking if not using Firebase
            const bookingId = bookingData.id || generateId();
            
            if (!database) {
                // Fallback to localStorage if Firebase fails to initialize
                bookingData.id = bookingId;
                SERVER_BOOKINGS.push(bookingData);
                localStorage.setItem('server_bookings', JSON.stringify(SERVER_BOOKINGS));
                return bookingData;
            }
            
            // Save to Firebase
            await database.ref('bookings/' + bookingId).set({
                ...bookingData,
                createdAt: new Date().toISOString()
            });
            
            return { id: bookingId, ...bookingData };
        } catch (error) {
            console.error('Error creating booking:', error);
            errorMessage.textContent = 'Error saving your booking. Please try again later.';
            errorMessage.classList.remove('hidden');
            
            // Fallback to localStorage
            try {
                bookingData.id = bookingData.id || generateId();
                SERVER_BOOKINGS.push(bookingData);
                localStorage.setItem('server_bookings', JSON.stringify(SERVER_BOOKINGS));
                return bookingData;
            } catch (fallbackError) {
                console.error('Fallback error:', fallbackError);
                throw error;
            }
        }
    }
    
    async function updateBooking(id, updatedData) {
        try {
            if (!database) {
                // Fallback to localStorage if Firebase fails to initialize
                const index = SERVER_BOOKINGS.findIndex(b => b.id === id);
                if (index !== -1) {
                    SERVER_BOOKINGS[index] = { ...SERVER_BOOKINGS[index], ...updatedData };
                    localStorage.setItem('server_bookings', JSON.stringify(SERVER_BOOKINGS));
                    return SERVER_BOOKINGS[index];
                }
                throw new Error('Booking not found');
            }
            
            // Update in Firebase
            await database.ref('bookings/' + id).update({
                ...updatedData,
                updatedAt: new Date().toISOString()
            });
            
            // Get updated booking
            const snapshot = await database.ref('bookings/' + id).once('value');
            return { id, ...snapshot.val() };
        } catch (error) {
            console.error('Error updating booking:', error);
            errorMessage.textContent = 'Error updating booking. Please try again later.';
            errorMessage.classList.remove('hidden');
            
            // Fallback to localStorage
            try {
                const index = SERVER_BOOKINGS.findIndex(b => b.id === id);
                if (index !== -1) {
                    SERVER_BOOKINGS[index] = { ...SERVER_BOOKINGS[index], ...updatedData };
                    localStorage.setItem('server_bookings', JSON.stringify(SERVER_BOOKINGS));
                    return SERVER_BOOKINGS[index];
                }
                throw new Error('Booking not found');
            } catch (fallbackError) {
                console.error('Fallback error:', fallbackError);
                throw error;
            }
        }
    }
    
    async function deleteBooking(id) {
        try {
            if (!database) {
                // Fallback to localStorage if Firebase fails to initialize
                const index = SERVER_BOOKINGS.findIndex(b => b.id === id);
                if (index !== -1) {
                    SERVER_BOOKINGS.splice(index, 1);
                    localStorage.setItem('server_bookings', JSON.stringify(SERVER_BOOKINGS));
                    return true;
                }
                throw new Error('Booking not found');
            }
            
            // Delete from Firebase
            await database.ref('bookings/' + id).remove();
            return true;
        } catch (error) {
            console.error('Error deleting booking:', error);
            errorMessage.textContent = 'Error cancelling booking. Please try again later.';
            errorMessage.classList.remove('hidden');
            
            // Fallback to localStorage
            try {
                const index = SERVER_BOOKINGS.findIndex(b => b.id === id);
                if (index !== -1) {
                    SERVER_BOOKINGS.splice(index, 1);
                    localStorage.setItem('server_bookings', JSON.stringify(SERVER_BOOKINGS));
                    return true;
                }
                throw new Error('Booking not found');
            } catch (fallbackError) {
                console.error('Fallback error:', fallbackError);
                throw error;
            }
        }
    }
    
    // Setup real-time updates
    function setupRealTimeUpdates() {
        if (!database) return;
        
        // Listen for changes in the bookings collection
        database.ref('bookings').on('value', function(snapshot) {
            console.log('Received real-time update');
            // Only refresh if we're on the admin page and logged in
            if (!adminTab.classList.contains('hidden') && !bookingsList.classList.contains('hidden')) {
                displayBookings();
            }
        });
    }
    
    // Display bookings in the table
    async function displayBookings() {
        try {
            loadingMessage.classList.remove('hidden');
            bookingsTable.innerHTML = '';
            
            // Get bookings from API
            const bookings = await fetchBookings();
            
            // Get filter values
            const dateFilter = filterDate.value;
            const venueFilter = filterVenue.value;
            const statusFilter = filterStatus.value;
            
            // Filter bookings
            let filteredBookings = bookings;
            
            if (dateFilter) {
                filteredBookings = filteredBookings.filter(booking => booking.eventDate === dateFilter);
            }
            
            if (venueFilter) {
                filteredBookings = filteredBookings.filter(booking => booking.venue === venueFilter);
            }
            
            if (statusFilter) {
                filteredBookings = filteredBookings.filter(booking => booking.status === statusFilter);
            }
            
            // Sort bookings by date (most recent first)
            filteredBookings.sort((a, b) => new Date(a.eventDate) - new Date(b.eventDate));
            
            loadingMessage.classList.add('hidden');
            
            // Add bookings to table
            if (filteredBookings.length === 0) {
                const row = bookingsTable.insertRow();
                const cell = row.insertCell(0);
                cell.colSpan = 10;
                cell.textContent = 'No bookings found';
                cell.style.textAlign = 'center';
                return;
            }
            
            filteredBookings.forEach((booking) => {
                const row = bookingsTable.insertRow();
                
                // Add class for confirmed bookings
                if (booking.status === 'confirmed') {
                    row.classList.add('confirmed-booking');
                }
                
                row.insertCell(0).textContent = formatDate(booking.eventDate);
                row.insertCell(1).textContent = `${booking.startTime} - ${booking.endTime}`;
                row.insertCell(2).textContent = booking.venue;
                row.insertCell(3).textContent = booking.groupSize;
                row.insertCell(4).textContent = booking.bookedBy;
                row.insertCell(5).textContent = booking.email;
                
                // Status cell
                const statusCell = row.insertCell(6);
                const statusLabel = document.createElement('span');
                statusLabel.textContent = booking.status === 'confirmed' ? 'Confirmed' : 'Pending';
                statusLabel.classList.add('status-label');
                statusLabel.classList.add(booking.status === 'confirmed' ? 'status-confirmed' : 'status-pending');
                statusCell.appendChild(statusLabel);
                
                // Notes cell
                row.insertCell(7).textContent = booking.notes || '';
                
                // Admin notes cell
                const adminNotesCell = row.insertCell(8);
                const adminNotesInput = document.createElement('textarea');
                adminNotesInput.value = booking.adminNotes || '';
                adminNotesInput.rows = 2;
                adminNotesInput.style.width = '100%';
                adminNotesInput.addEventListener('change', async function() {
                    try {
                        await updateBooking(booking.id, { 
                            adminNotes: adminNotesInput.value 
                        });
                    } catch (error) {
                        console.error('Failed to update admin notes:', error);
                    }
                });
                adminNotesCell.appendChild(adminNotesInput);
                
                // Actions cell
                const actionsCell = row.insertCell(9);
                const actionsDiv = document.createElement('div');
                actionsDiv.className = 'action-buttons';
                
                // Cancel button
                const deleteButton = document.createElement('button');
                deleteButton.textContent = 'Cancel';
                deleteButton.style.backgroundColor = '#e74c3c';
                deleteButton.onclick = async function() {
                    if (confirm('Are you sure you want to cancel this booking?')) {
                        try {
                            await deleteBooking(booking.id);
                            displayBookings();
                        } catch (error) {
                            console.error('Failed to cancel booking:', error);
                        }
                    }
                };
                actionsDiv.appendChild(deleteButton);
                
                // Confirm button - only show if not already confirmed
                if (booking.status !== 'confirmed') {
                    const confirmButton = document.createElement('button');
                    confirmButton.textContent = 'Confirm';
                    confirmButton.style.backgroundColor = '#27ae60';
                    confirmButton.onclick = async function() {
                        if (confirm('Confirm this booking? This will block this time slot from future bookings.')) {
                            try {
                                await updateBooking(booking.id, { status: 'confirmed' });
                                displayBookings();
                            } catch (error) {
                                console.error('Failed to confirm booking:', error);
                            }
                        }
                    };
                    actionsDiv.appendChild(confirmButton);
                }
                
                actionsCell.appendChild(actionsDiv);
            });
        } catch (error) {
            console.error('Error displaying bookings:', error);
            loadingMessage.classList.add('hidden');
            errorMessage.classList.remove('hidden');
        }
    }
    
    // Check if two time ranges overlap
    function isTimeOverlap(startA, endA, startB, endB) {
        return (startA < endB && endA > startB);
    }
    
    // Check if booking time is valid
    function isValidBookingTime(start, end) {
        // Ensure end time is after start time
        return start < end;
    }
    
    // Check if there's a confirmed booking that conflicts with the requested time
    async function hasBookingConflict(date, venue, startTime, endTime) {
        try {
            const bookings = await fetchBookings();
            
            return bookings.some(booking => 
                booking.eventDate === date && 
                booking.venue === venue && 
                isTimeOverlap(startTime, endTime, booking.startTime, booking.endTime)
            );
        } catch (error) {
            console.error('Error checking for booking conflicts:', error);
            return false;
        }
    }
    
    // Handle form submission
    bookingForm.addEventListener('submit', async function(e) {
        e.preventDefault();
        
        // Disable submit button to prevent double submission
        submitBookingBtn.disabled = true;
        submitBookingBtn.textContent = 'Processing...';
        
        try {
            const eventDate = document.getElementById('eventDate').value;
            const startTimeValue = document.getElementById('startTime').value;
            const endTimeValue = document.getElementById('endTime').value;
            const venue = document.getElementById('venue').value;
            const groupSize = document.getElementById('groupSize').value;
            const bookedBy = document.getElementById('bookedBy').value;
            const email = document.getElementById('email').value;
            const notes = document.getElementById('notes').value;
            
            // Hide any previous error messages
            errorMessage.classList.add('hidden');
            
            // Validate time inputs
            if (!startTimeValue || !endTimeValue) {
                alert('Please select both start and end times');
                return;
            }
            
            // Check if end time is after start time
            if (!isValidBookingTime(startTimeValue, endTimeValue)) {
                alert('End time must be after start time');
                return;
            }
            
            // Basic validation for group size
            const maxCapacity = {
                'Training Room': 24,
                'Roadshow Room': 50,
                'Meeting Room A': 10,
                'Meeting Room B': 6,
                'Meeting Room VIP': 8,
                'Pantry Area': 10,
                'Open Coach Space': 20,
                'Tea Room': 20
            };
            
            if (parseInt(groupSize) > maxCapacity[venue]) {
                alert(`This venue has a maximum capacity of ${maxCapacity[venue]} people. Please select a different venue or reduce your group size.`);
                return;
            }
            
            // Validate email format
            const emailRegex = /^[^\s@]+@[^\s@]+\.[^\s@]+$/;
            if (!emailRegex.test(email)) {
                alert('Please enter a valid email address');
                return;
            }
            
            // Check for booking conflicts
            const hasConflict = await hasBookingConflict(eventDate, venue, startTimeValue, endTimeValue);
            
            if (hasConflict) {
                alert('This venue already has a booking that overlaps with your selected time period. Please choose a different time or venue.');
                return;
            }
            
            // Create new booking with pending status
            const newBooking = {
                eventDate,
                startTime: startTimeValue,
                endTime: endTimeValue,
                venue,
                groupSize,
                bookedBy,
                email,
                notes,
                adminNotes: '',
                status: 'pending',
                createdAt: new Date().toISOString()
            };
            
            // Save to the centralized system
            await createBooking(newBooking);
            
            // Reset form and show confirmation
            bookingForm.reset();
            bookingForm.style.display = 'none';
            confirmationMessage.classList.remove('hidden');
            
            // Reset form after 5 seconds
            setTimeout(() => {
                bookingForm.style.display = 'block';
                confirmationMessage.classList.add('hidden');
            }, 5000);
        } catch (error) {
            console.error('Error submitting booking:', error);
            errorMessage.classList.remove('hidden');
        } finally {
            // Re-enable the submit button
            submitBookingBtn.disabled = false;
            submitBookingBtn.textContent = 'Book Venue';
        }
    });
    
    // Set up filter change handlers
    filterDate.addEventListener('change', displayBookings);
    filterVenue.addEventListener('change', displayBookings);
    filterStatus.addEventListener('change', displayBookings);
    
    // Tab switching
    bookingTabBtn.addEventListener('click', function() {
        bookingTab.classList.remove('hidden');
        adminTab.classList.add('hidden');
        bookingTabBtn.classList.add('active');
        adminTabBtn.classList.remove('active');
        errorMessage.classList.add('hidden');
    });
    
    adminTabBtn.addEventListener('click', function() {
        bookingTab.classList.add('hidden');
        adminTab.classList.remove('hidden');
        bookingTabBtn.classList.remove('active');
        adminTabBtn.classList.add('active');
        errorMessage.classList.add('hidden');
    });
    
    // Admin login
    loginBtn.addEventListener('click', function() {
        if (adminPassword.value === companyPassword) {
            adminLogin.classList.add('hidden');
            bookingsList.classList.remove('hidden');
            displayBookings();
            // Save login state (in a real app, use a proper auth token)
            sessionStorage.setItem('isAdminLoggedIn', 'true');
        } else {
            alert('Incorrect password. Access denied.');
        }
    });
    
    // Logout
    logoutBtn.addEventListener('click', function() {
        adminLogin.classList.remove('hidden');
        bookingsList.classList.add('hidden');
        adminPassword.value = '';
        // Clear login state
        sessionStorage.removeItem('isAdminLoggedIn');
    });
    
    // Set minimum date to today
    const today = new Date().toISOString().split('T')[0];
    document.getElementById('eventDate').setAttribute('min', today);
    filterDate.setAttribute('min', today);
    
    // Check if admin is already logged in
    if (sessionStorage.getItem('isAdminLoggedIn') === 'true') {
        adminLogin.classList.add('hidden');
        bookingsList.classList.remove('hidden');
        displayBookings();
    }
    
    // Setup real-time updates for Firebase
    setupRealTimeUpdates();
});
